import fs from "fs/promises"
import os from "os"
import path from "path"
import { config as Config } from "../../config"
import { exec, fileExists } from "../../util"
import { VPNFactory } from "../vpn/vpn-factory"

export class ConfigManager {
    static async initConfigDir() {
        if (!(await fileExists(Config.VPN.PATH)) && os.platform() === "linux") {
            await fs.mkdir(Config.VPN.PATH)
        }
    }

    static async publishServerConfig(syncConfig = true) {
        const _clients = await VPNFactory.getFromAllUsers()
        const clients = _clients.reduce(
            (arr, client) => {
                arr.push(
                    [
                        `# Client: ${client.alias} (${client.id})`,
                        "[Peer]",
                        `PublicKey = ${client.pub}`,
                        `PresharedKey = ${client.psk}`,
                        `AllowedIPs = ${client.ipv4}/32, ${client.ipv6}/128`,
                        "",
                    ].join("\n"),
                )

                return arr
            },
            [""],
        )

        const config = [
            "# Note: Do not edit this file directly. It is generated by the RadicalVPN server.",
            "# Your changes will be overwritten!",
            "",
            "# Server",
            "[Interface]",
            `PrivateKey = ${Config.VPN.SECRETS.PRIVATE_KEY}`,
            `Address = ${Config.VPN.WG_SERVER.IPS.V4}, ${Config.VPN.WG_SERVER.IPS.V6}`,
            "ListenPort = 51820",
            ...clients,
        ].join("\n")

        if (os.platform() === "linux") {
            await fs.writeFile(path.join(Config.VPN.PATH, "wg0.conf"), config, {
                mode: 0o600,
            })
        }
        if (syncConfig && os.platform() === "linux") {
            console.log("syncing wireguard config..")
            await exec("wg syncconf wg0 <(wg-quick strip wg0)")
        }
    }
}
