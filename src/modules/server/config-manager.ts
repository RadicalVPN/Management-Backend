import { Node } from "../nodes/node"
import { NodeFactory } from "../nodes/node-factory"
import { VPNFactory } from "../vpn/vpn-factory"
import { VpnPublishQueue } from "./vpn-publish-queue"

export class ConfigManager {
    static async publishServerConfig(node: "global" | string) {
        if (node === "all") {
            const nodes = await new NodeFactory().getAll()
            await Promise.all(
                nodes.map(
                    async (_node) => await this.writeToPublishQueue(_node),
                ),
            )
        } else {
            const _node = await new NodeFactory().get(node)
            if (_node) {
                await this.writeToPublishQueue(_node)
            }
        }
    }

    private static async writeToPublishQueue(node: Node) {
        await new VpnPublishQueue(node).publish(
            await this.computeNodeConfig(node),
        )
    }

    private static async computeNodeConfig(node: Node) {
        return await this.computeServerConfig(
            await this.computeClients(node),
            node,
        )
    }

    private static async computeClients(node: Node) {
        const clients = await VPNFactory.getForNode(node.data.id)
        return clients.reduce(
            (arr, client) => {
                arr.push(
                    [
                        `# Client: ${client.alias} (${client.id}) - ${node.data.hostname}`,
                        "[Peer]",
                        `PublicKey = ${client.pub}`,
                        `PresharedKey = ${client.psk}`,
                        `AllowedIPs = ${client.ipv4}/32, ${client.ipv6}/128`,
                        "",
                    ].join("\n"),
                )

                return arr
            },
            [""],
        )
    }

    private static computeServerConfig(clients: any, node: Node) {
        return [
            "# Note: Do not edit this file directly. It is generated by the RadicalVPN server.",
            "# Your changes will be overwritten!",
            `# Generated for Radical VPN Node: ${node.data.hostname}`,
            "",
            "# Server",
            "[Interface]",
            `PrivateKey = ${node.data.private_key}`,
            "ListenPort = 51820",
            ...clients,
        ].join("\n")
    }
}
